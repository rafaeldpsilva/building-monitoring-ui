# -*- coding: utf-8 -*-
"""Benefit_Distributions_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5iMkHUN0dWuLOajAmmWSFHeTn_UEJ3q
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-display
# %pip install plotly == 5.8.0
# %pip install --upgrade kneed                                       #
# import base64
# import kneed as kd                                                 #
# import io
# import ipywidgets as widgets
# from   ipywidgets import GridspecLayout
# from   IPython.display import display, clear_output
# import math
# import matplotlib as mpl
# import matplotlib.pyplot as plt
# import numpy as np
# import os                                                          #
# import pandas as pd
# import plotly.graph_objects as go
# from   plotly.subplots import make_subplots                        #
# from   sklearn.cluster import KMeans                               #
# from   sklearn.metrics import silhouette_samples, silhouette_score #
# from   sklearn.preprocessing import MinMaxScaler, StandardScaler   #
# import sys
# import time
# import tensorflow as tf                                            #
# import warnings                                                    #
# #For the Plots
# from google.colab import output
# output.enable_custom_widget_manager()
# #Importing Files from Google Drive---------------------------------
# from pydrive.auth import GoogleAuth
# from pydrive.drive import GoogleDrive
# from google.colab import auth
# from oauth2client.client import GoogleCredentials
# #Authenticate and create the PyDrive client.
# auth.authenticate_user()
# gauth = GoogleAuth()
# gauth.credentials = GoogleCredentials.get_application_default()
# drive = GoogleDrive(gauth)
# #Access the content of the Drive (The Files illustrated in the Left)
# from google.colab import drive
# drive.mount('/content/drive') #, force_remount=True)
# sys.path.append('/content/drive/MyDrive/Python/Demonstrador/ScriptsAfter16June12')
# 
# #Importing SRIPTS------------------------------------------------------------------
# ###  PrepareIputs Script
# import PrepareInputs_Script as PIS
# ###  Clustering Script
# import Clustering_Script as CS
# ###  Monitoring Script
# import Monitoring_Script as MS

"""#Read and Prepare Data"""

#INPUT FOR AGGREGATED/SR Model
with open('/content/drive/MyDrive/Python/Demonstrador/Demos_TESE/Excel_Tese/INPUT_ISGTeu23_Clustering_AG_SR_130620.xlsx', 'rb') as data:
    Hist_Part              = pd.read_excel(data,sheet_name ='Historic_Qty.Participation')
    Hist_Flex              = pd.read_excel(data,sheet_name ='Historic_Flexibility')
    Hist_Requ              = pd.read_excel(data,sheet_name ='Historic_Qty.Request',skiprows=1)
    Data_total_Cons        = pd.read_excel(data,sheet_name ='Forecasted_Cons')
    Data_total_Flex        = pd.read_excel(data,sheet_name ='Forecasted_Flex',nrows=1, usecols=lambda x: 'Unnamed' not in x)#Ignore the first Column
    Data_total_R           = pd.read_excel(data,sheet_name ='Flex_Redu_Forecasted')
    Data_total_S           = pd.read_excel(data,sheet_name ='Flex_Shif_Forecasted')
    Hours_Shift            = pd.read_excel(data,sheet_name ='Shift_Hours')
    kWh_Shift              = pd.read_excel(data,sheet_name ='Shift_kWh')
    DF_Mode                = pd.read_excel(data,sheet_name ='Mode')
    CountMonth             = pd.read_excel(data,sheet_name ='Count_Month')
#INPUT FOR DD (Device by Device)
with open('/content/drive/MyDrive/Python/Demonstrador/Demos_TESE/Excel_Tese/INPUT_ISGTeu23_Clustering_EpE_130620_V2.xlsx', 'rb') as data:
    Data_total_Cons_DD     = pd.read_excel(data,sheet_name ='Devices_Cons_1h_Forecast_Values')
    Data_total_Flex_DD     = pd.read_excel(data,sheet_name ='Devices_Flex_1h_Forecast_Values')
    Hist_Part_DD           = pd.read_excel(data,sheet_name ='Historic_Qty.Participation')
    Hist_Flex_DD           = pd.read_excel(data,sheet_name ='Historic_Flexibility')
    Hist_Requ_DD           = pd.read_excel(data,sheet_name ='Historic_Qty.Request')
    Hours_Shift_DD         = pd.read_excel(data,sheet_name ='Shift_Hours')
    kWh_Shift_DD           = pd.read_excel(data,sheet_name ='Shift_kWh')
    DF_Group               = pd.read_excel(data,sheet_name ='Group')
    CountMonth_DD          = pd.read_excel(data,sheet_name ='Count_Month')
    RealFlex               = pd.read_excel(data,sheet_name ='Real_Flex')

RealFlex

##################################################### PARAMETERS #####################################################
#Generation Surplus (GS)  Dataframe 2 Columns [Hour, Energy (kWh)]
GS=pd.DataFrame([[2.6],[29.4],[0.8]], columns=[0], index=[12,13,14])
#Energy value (kWh) to reduce during the DR Event
To_Reduce=5.145

# R=DF.sum(axis=1, numeric_only=float).to_frame()
# Rank=R.loc[DF[DF["Shifting_Flex"]>0].index,:].sort_values(0,ascending=False).index.values
# Shift_values, Cost = PIS.Impact_Surplus(DF[DF["Shifting_Flex"]>0],GS,Rank)

##################################################### PREPARE THE DATA #####################################################
### DATA RELATED TO AGGREGATEDD/(SHIFTING OR REDUCING) MODEL------------------------------------------------------------------------------------
DF_SR = PIS.PrepareData_SR(Data_total_Cons,Data_total_Flex,Data_total_R,Data_total_S,Hist_Part,Hist_Flex,Hist_Requ,Hours_Shift,kWh_Shift,DF_Mode)
### DATA RELATED TO EQUIPMENT BY EQUIPMENT MODEL------------------------------------------------------------------------------------------------
DF_DD = PIS.PrepareData_AbA(Data_total_Cons_DD,Data_total_Flex_DD,Hist_Part_DD,Hist_Flex_DD,Hist_Requ_DD,Hours_Shift_DD,kWh_Shift_DD,DF_Group)
### Input for the Ranking algorithm
DF,DF_Flex=PIS.OrCa(DF_SR,DF_DD, RealFlex)

# DF["Generation_Surplus"]=0.0
# DF["Generation_Surplus"][:11] = np.random.uniform(low=0.80, high=3.00, size=11)

DF_DD

DF

"""#Benefits/Remuneration Distribution"""

# Revenue obtained throuh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

def Benefits_Distribution(Revenue,DF):
  #Datafrme with the Members' Contribution
  DF_BenDist=pd.DataFrame(0.0,columns=["Cont_Used_Flex","Cont_Effort","Penalization_P","Penalization_F","Penalizations","Contribution","Benefits"], index=DF.index)

  for i in DF_BenDist.index:
      ###Calculate the Member's Contributions
        #Effort Rate
      DF_BenDist["Cont_Effort"][i]        = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
        #Used Flexibility
      DF_BenDist["Cont_Used_Flex"][i]     = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
      ###Calculate the Member's Penalization
      DF_BenDist["Penalization_P"][i]     = ((DF['Participation(%)'])[i]/max(DF['Participation(%)'])) #*(1-abs((DF["T_Flexibility"][i]-DF_Flex[i].mean())/DF_Flex[i].mean()))
      DF_BenDist["Penalization_F"][i]     = (1-abs((DF["T_Flexibility"][i]-DF_Flex[i].mean())/DF_Flex[i].mean()))
      DF_BenDist["Penalizations"][i]      = (DF_BenDist["Penalization_P"]*DF_BenDist["Penalization_F"])[i]

      #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
      DF_BenDist["Contribution"][i] = 1/2*(DF_BenDist["Cont_Used_Flex"] + DF_BenDist["Cont_Effort"])[i]

      if(DF_BenDist["Contribution"][i] < 0):
          print(f"Contribution of the Member {i} is < 0")
          DF_BenDist["Contribution"][i] = 0
      if(DF_BenDist["Contribution"][i] > 1):
          print(f"Contribution of the Member {i} is > 1")

      #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
      DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(DF_BenDist["Penalizations"][i]),2)

    ## print(f"Contributions'  Sum: {round(sum(DF_BenDist['Contribution']), 3)};   Max: {round(max(DF_BenDist['Contribution']), 3)};   Min: {round(min(DF_BenDist['Contribution']), 3)}\
      #       \n     Benefits'  Sum: {round(sum(DF_BenDist['Benefits']),     3)};   Max: {round(max(DF_BenDist['Benefits']),     3)};   Min: {round(min(DF_BenDist['Benefits']),     3)}\
      #       \nPenalization_P' Sum: {round(sum(DF_BenDist['Penalization_P']), 3)}; Max: {round(max(DF_BenDist['Penalization_P']), 3)}; Min: {round(min(DF_BenDist['Penalization_P']), 3)}\
      #       \nPenalization_F' Sum: {round(sum(DF_BenDist['Penalization_F']), 3)}; Max: {round(max(DF_BenDist['Penalization_F']), 3)}; Min: {round(min(DF_BenDist['Penalization_F']), 3)}\
      #       \nPenalizations'  Sum: {round(sum(DF_BenDist['Penalizations']), 3)};  Max: {round(max(DF_BenDist['Penalizations']), 3)};  Min: {round(min(DF_BenDist['Penalizations']), 3)}\
      #       \nProsumers' Total Benerfits:  {round(sum(DF_BenDist['Benefits'][:11]), 3)}; Consumers' Total Benerfits: {round(sum(DF_BenDist['Benefits'][11:]), 3)}")
  return DF_BenDist.sort_values("Contribution", ascending=False)

"""## Version 4 (Only Flex. and Effort parameters)"""

DF.head(10)

#Datafrme with the Members' Contribution
DF_BenDist=pd.DataFrame(0.0,columns=["Cont_Used_Flex","Cont_Effort","Penalization_P","Penalization_F","Penalizations","Contribution","Benefits"], index=DF.index)
# Revenue obtained throguh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

for i in DF_BenDist.index:
    ###Calculate the Member's Contributions
      #Effort Rate
    DF_BenDist["Cont_Effort"][i]        = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
      #Used Flexibility
    DF_BenDist["Cont_Used_Flex"][i]     = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
    ###Calculate the Member's Penalization
    DF_BenDist["Penalization_P"][i]     = ((DF['Participation(%)'])[i]/max(DF['Participation(%)'])) #*(1-abs((DF["T_Flexibility"][i]-DF_Flex[i].mean())/DF_Flex[i].mean()))
    DF_BenDist["Penalization_F"][i]     = (1-abs((DF["T_Flexibility"][i]-DF_Flex[i].mean())/DF_Flex[i].mean()))
    DF_BenDist["Penalizations"][i]      = 1-(DF_BenDist["Penalization_P"]*DF_BenDist["Penalization_F"])[i]

    #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Contribution"][i] = 1/2*(DF_BenDist["Cont_Used_Flex"] + DF_BenDist["Cont_Effort"])[i]

    if(DF_BenDist["Contribution"][i] < 0):
        print(f"Contribution of the Member {i} is < 0")
        DF_BenDist["Contribution"][i] = 0
    if(DF_BenDist["Contribution"][i] > 1):
        print(f"Contribution of the Member {i} is > 1")

    #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(1-DF_BenDist["Penalizations"][i]),2)

print(f"Contributions'  Sum: {round(sum(DF_BenDist['Contribution']), 3)};   Max: {round(max(DF_BenDist['Contribution']), 3)};   Min: {round(min(DF_BenDist['Contribution']), 3)}\
      \n     Benefits'  Sum: {round(sum(DF_BenDist['Benefits']),     3)};   Max: {round(max(DF_BenDist['Benefits']),     3)};   Min: {round(min(DF_BenDist['Benefits']),     3)}\
      \nPenalization_P' Sum: {round(sum(DF_BenDist['Penalization_P']), 3)}; Max: {round(max(DF_BenDist['Penalization_P']), 3)}; Min: {round(min(DF_BenDist['Penalization_P']), 3)}\
      \nPenalization_F' Sum: {round(sum(DF_BenDist['Penalization_F']), 3)}; Max: {round(max(DF_BenDist['Penalization_F']), 3)}; Min: {round(min(DF_BenDist['Penalization_F']), 3)}\
      \nPenalizations'  Sum: {round(sum(DF_BenDist['Penalizations']), 3)};  Max: {round(max(DF_BenDist['Penalizations']), 3)};  Min: {round(min(DF_BenDist['Penalizations']), 3)}\
      \nProsumers' Total Benerfits:  {round(sum(DF_BenDist['Benefits'][:11]), 3)}; Consumers' Total Benerfits: {round(sum(DF_BenDist['Benefits'][11:]), 3)}")

DF_BenDist.sort_values("Contribution", ascending=False).head(20)

Fig = DF_BenDist.drop(["Penalization_P","Penalization_F"],axis=1).sort_values("Contribution", ascending=False).head(20)
Fig_1 = Fig.head(15).style.set_properties(subset=Fig.columns, **{'width': '10px','text-align': 'center'}).format(na_rep='-', precision=2)
Fig_1.set_table_styles([dict(selector = 'th', props=[('text-align', 'center')])])

"""##Version 1 (Without Generation)"""

#Datafrme with the Members' Contribution
DF_BenDist=pd.DataFrame(0.0,columns=["Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF.index)
# Revenue obtained throguh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

for i in DF_BenDist.index:
    ###Calculate the Member's Contributions
      #Effort Rate
    DF_BenDist["Cont_Effort"][i]      = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
      #Used Flexibility
    DF_BenDist["Cont_Used_Flex"][i]   = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset

    ###Calculate the Member's Penalization
    DF_BenDist["Penalization"][i]    = ((DF['Participation(%)'])[i]/max(DF['Participation(%)']))

    #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Contribution"][i] = 0.5*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i])

    if(DF_BenDist["Contribution"][i] < 0):
        print(f"Contribution of the Member {i} is < 0")
        DF_BenDist["Contribution"][i] = 0
    if(DF_BenDist["Contribution"][i] > 1):
        print(f"Contribution of the Member {i} is > 1")

    #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(DF_BenDist["Penalization"][i]) , 2)#

print(f"Contributions' Sum: {round(sum(DF_BenDist['Contribution']),2)}; Max: {round(max(DF_BenDist['Contribution']),2)}; Min: {round(min(DF_BenDist['Contribution']),3)}\
      \n     Benefits' Sum: {round(sum(DF_BenDist['Benefits']),2)}; Max: {round(max(DF_BenDist['Benefits']), 2)}; Min: {round(min(DF_BenDist['Benefits']),3)}\
      \nPenalizations' Sum: {round(sum(DF_BenDist['Penalization']),2)}; Max: {round(max(DF_BenDist['Penalization']), 2)}; Min: {round(min(DF_BenDist['Penalization']),3)}")
DF_BenDist.head(20)

"""##Version 2.1 (With Generation and Two Type of Members)"""

# print(f"{DF_Members[0]['T_Flexibility'].sum() + DF_Members[0]['Generation_Surplus'].sum()}\
# \n{DF_Members[1]['T_Flexibility'].sum()}")

DF["Generation_Surplus"]=0.0
DF["Generation_Surplus"][:11] = np.random.uniform(low=0.80, high=3.00, size=11)
# LIST with the DATAFRAMES of the Prosumers and Consumers
DF_Members=[DF.loc[DF["Generation_Surplus"] > 0],DF.loc[DF["Generation_Surplus"] == 0]] # 0 -> Prosumers; 1 -> Consumers
# Revenue obtained throguh the E DR events during Month g
Revenue = [25.0,25.0]  # Test purposes (Later replace/erase)
# LIST to save Members' CONTRIBUTIONS, PENALIZATIONS, and BENEFITS
DF_BenDist=[]

for j in range(len(DF_Members)):
  #Datafrme with the Members' Contribution
  DF_AUX=pd.DataFrame(0.0,columns=["Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF_Members[j].index)

  for i in DF_AUX.index:
      ###Calculate the Member's Penalization
      DF_AUX["Penalization"][i]     = ((DF_Members[j]['Participation(%)'])[i]/max(DF_Members[j]['Participation(%)']))

      ###Calculate the Member's Contributions ------------------------------------------------------------------------------------------------------------
        #Effort Rate
      DF_AUX["Cont_Effort"][i]      = (DF_Members[j]["Effort_Rate"][i]/sum(DF_Members[j]["Effort_Rate"]))
        #Used Flexibility
      DF_AUX["Cont_Used_Flex"][i]   = (DF_Members[j]["T_Flexibility"][i]/sum(DF_Members[j]["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset

      if(j == 0): #Prosumer (it is only considered the Generation Surplus, Effort rate and Used flexibility during the E DR events during the Month g)
            #Generation Surplus
          DF_AUX["Cont_Gen_Surplus"][i] = (DF_Members[j]["Generation_Surplus"][i]/sum(DF_Members[j]["Generation_Surplus"]))
          DF_AUX["Contribution"][i]     = (1/3)*(DF_AUX["Cont_Used_Flex"] + DF_AUX["Cont_Effort"] + DF_AUX["Cont_Gen_Surplus"])[i]
      else: #Consumer (it is only considered the Effort rate and Used flexibility during the E DR events during the Month g)
          DF_AUX["Contribution"][i]     = (1/2)*(DF_AUX["Cont_Used_Flex"] + DF_AUX["Cont_Effort"])[i]

      #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
      DF_AUX["Benefits"][i] = round( Revenue[j]*(DF_AUX["Contribution"][i]),2)#*(DF_AUX["Penalization"][i]) ,2)#

  DF_BenDist.append(DF_AUX)

print(f"PROSUMERS:\
      \n   Contributions' Sum:{round(sum(DF_BenDist[0]['Contribution']), 3)}; Max:{round(max(DF_BenDist[0]['Contribution']), 3)}; Min:{round(min(DF_BenDist[0]['Contribution']) ,3)}\
      \n        Benefits' Sum:{round(sum(DF_BenDist[0]['Benefits'])    , 3)}; Max:{round(max(DF_BenDist[0]['Benefits'])    , 3)}; Min:{round(min(DF_BenDist[0]['Benefits'])     ,3)}\
      \n   Penalizations' Sum:{round(sum(DF_BenDist[0]['Penalization']), 3)}; Max:{round(max(DF_BenDist[0]['Penalization']), 3)}; Min:{round(min(DF_BenDist[0]['Penalization']) ,3)}\
      \nCONSUMERS:\
      \n   Contributions' Sum:{round(sum(DF_BenDist[1]['Contribution']), 3)}; Max:{round(max(DF_BenDist[1]['Contribution']), 3)}; Min:{round(min(DF_BenDist[1]['Contribution']) ,3)}\
      \n        Benefits' Sum:{round(sum(DF_BenDist[1]['Benefits'])    , 3)}; Max:{round(max(DF_BenDist[1]['Benefits'])    , 3)}; Min:{round(min(DF_BenDist[1]['Benefits'])     ,3)}\
      \n   Penalizations' Sum:{round(sum(DF_BenDist[1]['Penalization']), 3)}; Max:{round(max(DF_BenDist[1]['Penalization']), 3)}; Min:{round(min(DF_BenDist[1]['Penalization']) ,3)}")

DF_BenDist[0]

DF_BenDist[1].info()

"""##Version 2.2 (With Generation and Two Type of Members)"""

DF["Generation_Surplus"]=0.0
DF["Generation_Surplus"][:11] = np.random.uniform(low=0.80, high=3.00, size=11)
# LIST with the DATAFRAMES of the Prosumers and Consumers
DF_Members=[DF.loc[DF["Generation_Surplus"] > 0],DF.loc[DF["Generation_Surplus"] == 0]] # 0 -> Prosumers; 1 -> Consumers
# Revenue obtained throguh the E DR events during Month g
Revenue = 50  # Test purposes (Later replace/erase)
# LIST to save Members' CONTRIBUTIONS, PENALIZATIONS, and BENEFITS
DF_BenDist=[]

for j in range(len(DF_Members)):
  #Datafrme with the Members' Contribution
  DF_AUX=pd.DataFrame(0.0,columns=["Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF_Members[j].index)

  for i in DF_AUX.index:
      ###Calculate the Member's Penalization
      DF_AUX["Penalization"][i]     = ((DF_Members[j]['Participation(%)'])[i]/max(DF_Members[j]['Participation(%)']))

      ###Calculate the Member's Contributions ------------------------------------------------------------------------------------------------------------
        #Effort Rate
      DF_AUX["Cont_Effort"][i]      = (DF_Members[j]["Effort_Rate"][i]/sum(DF_Members[j]["Effort_Rate"]))
        #Used Flexibility
      DF_AUX["Cont_Used_Flex"][i]   = (DF_Members[j]["T_Flexibility"][i]/sum(DF_Members[j]["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset

      if(j == 0): #Prosumer (it is only considered the Generation Surplus, Effort rate and Used flexibility during the E DR events during the Month g)
            #Generation Surplus
          DF_AUX["Cont_Gen_Surplus"][i] = (DF_Members[j]["Generation_Surplus"][i]/sum(DF_Members[j]["Generation_Surplus"]))
          DF_AUX["Contribution"][i]     = 0.5*(1/3)*(DF_AUX["Cont_Used_Flex"] + DF_AUX["Cont_Effort"] + DF_AUX["Cont_Gen_Surplus"])[i]
      else: #Consumer (it is only considered the Effort rate and Used flexibility during the E DR events during the Month g)
          DF_AUX["Contribution"][i]     = 0.5*(1/2)*(DF_AUX["Cont_Used_Flex"] + DF_AUX["Cont_Effort"])[i]

      #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
      DF_AUX["Benefits"][i] = round(Revenue*(DF_AUX["Contribution"][i]),2)#*(DF_AUX["Penalization"][i]) ,2)#

  DF_BenDist.append(DF_AUX)

print(f"PROSUMERS:\
      \n   Contributions' Sum:{round(sum(DF_BenDist[0]['Contribution']), 3)}; Max:{round(max(DF_BenDist[0]['Contribution']), 3)}; Min:{round(min(DF_BenDist[0]['Contribution']) , 3)}\
      \n        Benefits' Sum:{round(sum(DF_BenDist[0]['Benefits'])    , 3)}; Max:{round(max(DF_BenDist[0]['Benefits'])    , 3)}; Min:{round(min(DF_BenDist[0]['Benefits'])     , 3)}\
      \n   Penalizations' Sum:{round(sum(DF_BenDist[0]['Penalization']), 3)}; Max:{round(max(DF_BenDist[0]['Penalization']), 3)}; Min:{round(min(DF_BenDist[0]['Penalization']) , 3)}\
      \nCONSUMERS:\
      \n   Contributions' Sum:{round(sum(DF_BenDist[1]['Contribution']), 3)}; Max:{round(max(DF_BenDist[1]['Contribution']), 3)}; Min:{round(min(DF_BenDist[1]['Contribution']) , 3)}\
      \n        Benefits' Sum:{round(sum(DF_BenDist[1]['Benefits'])    , 3)}; Max:{round(max(DF_BenDist[1]['Benefits'])    , 3)}; Min:{round(min(DF_BenDist[1]['Benefits'])     , 3)}\
      \n   Penalizations' Sum:{round(sum(DF_BenDist[1]['Penalization']), 3)}; Max:{round(max(DF_BenDist[1]['Penalization']), 3)}; Min:{round(min(DF_BenDist[1]['Penalization']) , 3)}")

"""##Version 3 (One Equation and Types of Members)"""

DF.head(15)

DF["Generation_Surplus"]=0.0
DF["Generation_Surplus"][:11] = np.random.uniform(low=0.80, high=3.00, size=11)
#Datafrme with the Members' Contribution
DF_BenDist=pd.DataFrame(0.0,columns=["Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF.index)
# Revenue obtained throguh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

for i in DF_BenDist.index:
    ###Calculate the Member's Contributions
      #Effort Rate
    DF_BenDist["Cont_Effort"][i]      = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
      #Used Flexibility
    DF_BenDist["Cont_Used_Flex"][i]   = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
      #Generation Surplus
    DF_BenDist["Cont_Gen_Surplus"][i] = (DF["Generation_Surplus"][i]/sum(DF["Generation_Surplus"]))
    ###Calculate the Member's Penalization
    DF_BenDist["Penalization"][i]     = ((DF['Participation(%)'])[i]/max(DF['Participation(%)']))

    #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Contribution"][i] = 1/3*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i] + DF_BenDist["Cont_Gen_Surplus"][i])

    if(DF_BenDist["Contribution"][i] < 0):
        print(f"Contribution of the Member {i} is < 0")
        DF_BenDist["Contribution"][i] = 0
    if(DF_BenDist["Contribution"][i] > 1):
        print(f"Contribution of the Member {i} is > 1")

    #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i]),2)#*(DF_BenDist["Penalization"][i]),2)#

print(f"Contributions' Sum: {round(sum(DF_BenDist['Contribution']), 3)}; Max: {round(max(DF_BenDist['Contribution']), 3)}; Min: {round(min(DF_BenDist['Contribution']), 3)}\
      \n     Benefits' Sum: {round(sum(DF_BenDist['Benefits']),     3)}; Max: {round(max(DF_BenDist['Benefits']),     3)}; Min: {round(min(DF_BenDist['Benefits']),     3)}\
      \nPenalizations' Sum: {round(sum(DF_BenDist['Penalization']), 3)}; Max: {round(max(DF_BenDist['Penalization']), 3)}; Min: {round(min(DF_BenDist['Penalization']), 3)}\
      \nConsumers' Total Benerfits:  {round(sum(DF_BenDist['Benefits'][:11]), 3)}; Prosumers' Total Benerfits: {round(sum(DF_BenDist['Benefits'][11:]), 3)}")
DF_BenDist.head(20)

DF_BenDist['Benefits'][:11]

sum(DF_BenDist['Benefits'][:11])

sum(DF_BenDist["Contribution"])

sum(DF_BenDist['Cont_Gen_Surplus'])

sum(DF_BenDist['Cont_Used_Flex'])

sum(DF_BenDist['Cont_Effort'])

"""##Tests"""

# scaler = MinMaxScaler()
# print(scaler.fit(DF[['Participation(%)','Effort_Rate']]))
# print(scaler.data_max_)
# print(scaler.transform(DF[['Participation(%)','Effort_Rate']]))

# DF["Generation_Surplus"]=0.0
# aux_test = np.random.uniform(low=0.80, high=3.00, size=11)
# DF["Generation_Surplus"][:11] = aux_test
# Prosumers = DF.loc[DF["Generation_Surplus"]>0]
# Consumers = DF.loc[DF["Generation_Surplus"] == 0]
# Prosumers["T_Flexibility"].sum()

DF["Generation_Surplus"]=0.0
aux_test = np.random.uniform(low=0.80, high=3.00, size=11)
DF["Generation_Surplus"][:11] = aux_test
Prosumers = DF.loc[DF["Generation_Surplus"]>0]
Consumers = DF.loc[DF["Generation_Surplus"] == 0]

#Datafrme with the Members' Contribution
DF_BenDist=pd.DataFrame(0.0,columns=["TypeConsumer","Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF.index)
DF_BenDist["TypeConsumer"][:11]=1 #Test purposes (Later erase)
# Revenue obtained throguh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

for i in DF_BenDist.index:
    ###Calculate the Member's Contributions
      #Effort Rate
    DF_BenDist["Cont_Effort"][i]      = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
      #Used Flexibility
    DF_BenDist["Cont_Used_Flex"][i]   = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
      #Generation Surplus
    DF_BenDist["Cont_Gen_Surplus"][i] = (DF["Generation_Surplus"][i]/sum(DF["Generation_Surplus"]))

    ###Calculate the Member's Penalization
    DF_BenDist["Penalization"][i]    = ((DF['Participation(%)'])[i]/max(DF['Participation(%)']))

    #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
    if(DF_BenDist["TypeConsumer"][i] == 0): #Consumer (it is only considered the Effort rate and Used flexibility during the E DR events during the Month g)
        DF_BenDist["Contribution"][i] = 0.5*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i])
    if(DF_BenDist["TypeConsumer"][i] == 1): #Prosumer (it is only considered the Generation Surplus, Effort rate and Used flexibility during the E DR events during the Month g)
        DF_BenDist["Contribution"][i] = 0.5*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i])

    if(DF_BenDist["Contribution"][i] < 0):
        print(f"Contribution of the Member {i} is < 0")
        DF_BenDist["Contribution"][i] = 0
    if(DF_BenDist["Contribution"][i] > 1):
        print(f"Contribution of the Member {i} is > 1")

    #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(DF_BenDist["Penalization"][i]) , 2)#

print(f"Contributions' Sum: {round(sum(DF_BenDist['Contribution']),2)}; Max: {round(max(DF_BenDist['Contribution']),2)}; Min: {round(min(DF_BenDist['Contribution']),3)}\
      \n     Benefits' Sum: {round(sum(DF_BenDist['Benefits']),2)}; Max: {round(max(DF_BenDist['Benefits']), 2)}; Min: {round(min(DF_BenDist['Benefits']),3)}\
      \nPenalizations' Sum: {round(sum(DF_BenDist['Penalization']),2)}; Max: {round(max(DF_BenDist['Penalization']), 2)}; Min: {round(min(DF_BenDist['Penalization']),3)}")
DF_BenDist.head(20)

round(sum(DF_BenDist['Cont_Effort']), 2)

round(sum(DF_BenDist['Cont_Used_Flex']), 2)

"""#Backup"""

DF["Generation_Surplus"]=0.0
aux_test = np.random.uniform(low=0.80, high=3.00, size=11)
DF["Generation_Surplus"][:11] = aux_test
Prosumers = DF.loc[DF["Generation_Surplus"]>0]
Consumers = DF.loc[DF["Generation_Surplus"] == 0]

#Datafrme with the Members' Contribution
DF_BenDist=pd.DataFrame(0.0,columns=["TypeConsumer","Cont_Gen_Surplus","Cont_Used_Flex","Cont_Effort","Penalization","Contribution","Benefits"], index=DF.index)
DF_BenDist["TypeConsumer"][:11]=1 #Test purposes (Later erase)
# Revenue obtained throguh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

for i in DF_BenDist.index:
    ###Calculate the Member's Contributions
      #Effort Rate
    DF_BenDist["Cont_Effort"][i]      = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
      #Used Flexibility
    DF_BenDist["Cont_Used_Flex"][i]   = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
      #Generation Surplus
    DF_BenDist["Cont_Gen_Surplus"][i] = (DF["Generation_Surplus"][i]/sum(DF["Generation_Surplus"]))

    ###Calculate the Member's Penalization
    DF_BenDist["Penalization"][i]    = ((DF['Participation(%)'])[i]/max(DF['Participation(%)']))

    #Calculate the Members' Contributions ------------------------------------------------------------------------------------------------------------
    if(DF_BenDist["TypeConsumer"][i] == 0): #Consumer (it is only considered the Effort rate and Used flexibility during the E DR events during the Month g)
        DF_BenDist["Contribution"][i] = 0.5*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i])
    if(DF_BenDist["TypeConsumer"][i] == 1): #Prosumer (it is only considered the Generation Surplus, Effort rate and Used flexibility during the E DR events during the Month g)
        DF_BenDist["Contribution"][i] = 0.5*(DF_BenDist["Cont_Used_Flex"][i] + DF_BenDist["Cont_Effort"][i])

    if(DF_BenDist["Contribution"][i] < 0):
        print(f"Contribution of the Member {i} is < 0")
        DF_BenDist["Contribution"][i] = 0
    if(DF_BenDist["Contribution"][i] > 1):
        print(f"Contribution of the Member {i} is > 1")

    #Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
    DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(DF_BenDist["Penalization"][i]) , 2)#

print(f"Contributions' Sum: {round(sum(DF_BenDist['Contribution']),2)}; Max: {round(max(DF_BenDist['Contribution']),2)}; Min: {round(min(DF_BenDist['Contribution']),3)}\
      \n     Benefits' Sum: {round(sum(DF_BenDist['Benefits']),2)}; Max: {round(max(DF_BenDist['Benefits']), 2)}; Min: {round(min(DF_BenDist['Benefits']),3)}\
      \nPenalizations' Sum: {round(sum(DF_BenDist['Penalization']),2)}; Max: {round(max(DF_BenDist['Penalization']), 2)}; Min: {round(min(DF_BenDist['Penalization']),3)}")
DF_BenDist.head(20)